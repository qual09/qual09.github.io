{"version":3,"sources":["components/layout/Header.js","components/layout/Footer.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","marginBottom","linkStyle","to","padding","textAlign","textDecoration","Footer","footerStyle","color","fontSize","marginTop","TodoItem","getStyle","background","props","todo","completed","borderRadius","transition","this","id","title","type","onChange","markComplete","bind","defaultChecked","onClick","delTodo","btnStyle","Component","border","cursor","float","Todos","todos","map","key","React","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","filter","post","res","data","get","basename","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8897179d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1 style={{ marginBottom: '5px' }}>Todo List</h1>\r\n      <Link style={linkStyle} to=\"/\">Home</Link>\r\n      |\r\n      <Link style={linkStyle} to=\"/about\">About</Link>\r\n    </header >\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n  // backgroundColor: '#eee',\r\n  padding: '10px 0 15px 0',\r\n  textAlign: 'center',\r\n}\r\n\r\nconst linkStyle = {\r\n  padding: '10px',\r\n  textDecoration: 'none'\r\n}","import React from 'react';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer style={footerStyle}>\r\n      &copy; 2020 Hieu CPX. All rights reserved.\r\n    </footer>\r\n  )\r\n}\r\n\r\nconst footerStyle = {\r\n  color: '#999',\r\n  fontSize: '0.8em',\r\n  marginTop: '20px',\r\n  textAlign: 'center',\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: this.props.todo.completed ? 'lightgray' : 'lightyellow',\r\n      borderRadius: '5px',\r\n      marginBottom: '10px',\r\n      padding: '10px',\r\n      textDecoration: this.props.todo.completed ? 'line-through' : 'none',\r\n      transition: '0.3s ease'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} defaultChecked={this.props.todo.completed} />\r\n          {' '} {title}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nconst btnStyle = {\r\n  background: 'red',\r\n  color: 'white',\r\n  border: 'none',\r\n  padding: '5px 9px',\r\n  borderRadius: '5px',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n  render() {\r\n    return this.props.todos.map(todo =>\r\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n    );\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: '' });\r\n  }\r\n\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: 'flex', marginBottom: '10px' }}>\r\n        <input type=\"text\" name=\"title\" style={{ border: '1px solid #555', padding: '5px', flex: '10' }} placeholder=\"Add Todo...\" value={this.state.title} onChange={this.onChange} />\r\n        <input type=\"submit\" value=\"Add\" className=\"btn\" style={{ flex: '1' }} />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n  return (\r\n    <React.Fragment>\r\n      <p>This is the Todo List app v1.0.0. made using React.</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Header from './components/layout/Header';\r\nimport Footer from './components/layout/Footer';\r\nimport Todos from './components/Todos';\r\nimport AddTodo from './components/AddTodo';\r\nimport About from './components/pages/About';\r\n// import { v4 as uuidv4 } from 'uuid';\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todos: [\r\n      // {\r\n      //   id: 1,\r\n      //   title: 'Take out the trash',\r\n      //   completed: false\r\n      // },\r\n      // {\r\n      //   id: 2,\r\n      //   title: 'Meeting with boss',\r\n      //   completed: false\r\n      // },\r\n      // {\r\n      //   id: 3,\r\n      //   title: 'Walk the dog',\r\n      //   completed: false\r\n      // },\r\n    ]\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\r\n      .then(res => {\r\n        this.setState({ todos: res.data });\r\n      })\r\n  }\r\n\r\n  // Toggle Complete\r\n  markComplete = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n  // Delete Todo\r\n  delTodo = (id) => {\r\n    axios\r\n      .delete('https://jsonplaceholder.typicode.com/todos/' + id)\r\n      .then(() => this.setState({\r\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\r\n      }));\r\n  }\r\n\r\n  // Add Todo\r\n  addTodo = (title) => {\r\n    axios\r\n      .post('https://jsonplaceholder.typicode.com/todos', {\r\n        title,\r\n        completed: false\r\n      })\r\n      .then(res => this.setState({ todos: [...this.state.todos, res.data] }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router basename=\"%PUBLIC_URL%\">\r\n        <div className=\"App\">\r\n          {/* Header */}\r\n          <Header />\r\n\r\n          {/* Body */}\r\n          <div className=\"container\">\r\n            <Route exact path=\"/\" render={props => (\r\n              <React.Fragment>\r\n                <AddTodo addTodo={this.addTodo} />\r\n                <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\r\n              </React.Fragment>\r\n            )} />\r\n            <Route path=\"/about\" component={About} />\r\n          </div>\r\n\r\n          {/* Footer */}\r\n          <Footer />\r\n\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}